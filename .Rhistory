dnm_chr
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
dnm_chr <- dnm_chr %>% filter(distance < 10000) #Filter on both distances >10kb
dnm_chr
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
dnm_chr <- dnm_chr %>% filter(distance < 10000 | distance2 < 10000) #Filter on both distances >10kb
dnm_chr
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
print(nrow(dnm_chr))
dnm_chr <- dnm_chr %>% filter(distance < 10000 | distance2 < 10000) #Filter on both distances >10kb
print(nrow(dnm_chr))
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
print(dnm_chr)
dnm_chr <- dnm_chr %>% filter(distance < 10000 | distance2 < 10000) #Filter on both distances >10kb
print(dnm_chr)
#First, the DNMs are sorted by chromosome. This loop makes the word chr# and filters the dnms file based on this. Then, a new variable with the name dnm_chr_# is made, and the variants are assigned to it.
for (dnm_chr_i in c(1:22)){
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
dnm_chr <- dnm_chr %>% filter(distance < 10000 | distance2 < 10000) #Filter on both distances >10kb
assign(paste("dnm_clustered_chr", dnm_chr_i, sep="_"), dnm_clustered)
}
print(dnm_clustered_chr_1)
print(dnm_clustered_chr_10)
#First, the DNMs are sorted by chromosome. This loop makes the word chr# and filters the dnms file based on this. Then, a new variable with the name dnm_chr_# is made, and the variants are assigned to it.
for (dnm_chr_i in c(1:22)){
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
dnm_chr <- dnm_chr %>% filter(distance < 10000 | distance2 < 10000) #Filter on both distances >10kb
assign(paste("dnm_clustered_chr", dnm_chr_i, sep="_"), dnm_chr)
}
print(dnm_clustered_chr_10)
#First, the DNMs are sorted by chromosome. This loop makes the word chr# and filters the dnms file based on this. Then, a new variable with the name dnm_chr_# is made, and the variants are assigned to it.
for (dnm_chr_i in c(1:22)){
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
dnm_chr <- dnm_chr %>% filter(distance < 10000 | distance2 < 10000) #Filter on both distances >10kb
clustered_dnms <- data.frame()
merge(dnm_chr, clustered_dnms)
assign(paste("dnm_clustered_chr", dnm_chr_i, sep="_"), dnm_chr)
}
clustered_dnms
#First, the DNMs are sorted by chromosome. This loop makes the word chr# and filters the dnms file based on this. Then, a new variable with the name dnm_chr_# is made, and the variants are assigned to it.
clustered_dnms <- data.frame()
for (dnm_chr_i in c(1:22)){
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
dnm_chr <- dnm_chr %>% filter(distance < 10000 | distance2 < 10000) #Filter on both distances >10kb
merge(dnm_chr, clustered_dnms)
assign(paste("dnm_clustered_chr", dnm_chr_i, sep="_"), dnm_chr)
}
clustered_dnms
library(ggplot2)
library(cowplot)
setwd('/Users/emilvorsteveld/work/R/DNM') #set working directory
data <- read.csv2("data.csv") #load data from csv file
data[is.na(data)] = "DNM"
pat <- 816
nrow_total <- nrow(data)
print(nrow_total)
avg_variants <- nrow_total / pat
#data %>% select(Chromosome, Start.position, End.position, Reference, Variant, parentOfOrigin)
source("npatmat.r")
source("mut_type.r")
source("var_per_chr.r")
source("DNM_type.r")
source("DNM_distance.r")
clustered_dnms
#First, the DNMs are sorted by chromosome. This loop makes the word chr# and filters the dnms file based on this. Then, a new variable with the name dnm_chr_# is made, and the variants are assigned to it.
clustered_dnms <- data.frame("Chromosome", "Start.position", "End.position", "Reference", "Variant", "parentOfOrigin", "distance", "distance2")
for (dnm_chr_i in c(1:22)){
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
dnm_chr <- dnm_chr %>% filter(distance < 10000 | distance2 < 10000) #Filter on both distances >10kb
merge(dnm_chr, clustered_dnms)
assign(paste("dnm_clustered_chr", dnm_chr_i, sep="_"), dnm_chr)
}
clustered_dnms
#First, the DNMs are sorted by chromosome. This loop makes the word chr# and filters the dnms file based on this. Then, a new variable with the name dnm_chr_# is made, and the variants are assigned to it.
clustered_dnms <- data.frame("Chromosome", "Start.position", "End.position", "Reference", "Variant", "parentOfOrigin", "distance", "distance2")
for (dnm_chr_i in c(1:22)){
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
dnm_chr <- dnm_chr %>% filter(distance < 10000 | distance2 < 10000) #Filter on both distances >10kb
merge(dnm_chr, clustered_dnms, by="Chromosome", all=TRUE)
assign(paste("dnm_clustered_chr", dnm_chr_i, sep="_"), dnm_chr)
}
dnm_chr
#First, the DNMs are sorted by chromosome. This loop makes the word chr# and filters the dnms file based on this. Then, a new variable with the name dnm_chr_# is made, and the variants are assigned to it.
#clustered_dnms <- data.frame("Chromosome", "Start.position", "End.position", "Reference", "Variant", "parentOfOrigin", "distance", "distance2")
for (dnm_chr_i in c(1:22)){
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
dnm_chr <- dnm_chr %>% filter(distance < 10000 | distance2 < 10000) #Filter on both distances >10kb
clustered_dnms = clustered_dnms%>% full_join(dnm_chr, by="Chromosome")
#merge(dnm_chr, clustered_dnms, by="Chromosome", all=TRUE)
assign(paste("dnm_clustered_chr", dnm_chr_i, sep="_"), dnm_chr)
}
#First, the DNMs are sorted by chromosome. This loop makes the word chr# and filters the dnms file based on this. Then, a new variable with the name dnm_chr_# is made, and the variants are assigned to it.
clustered_dnms <- data.frame("Chromosome", "Start.position", "End.position", "Reference", "Variant", "parentOfOrigin", "distance", "distance2")
for (dnm_chr_i in c(1:22)){
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
dnm_chr <- dnm_chr %>% filter(distance < 10000 | distance2 < 10000) #Filter on both distances >10kb
clustered_dnms = clustered_dnms%>% full_join(dnm_chr, by="Chromosome")
#merge(dnm_chr, clustered_dnms, by="Chromosome", all=TRUE)
assign(paste("dnm_clustered_chr", dnm_chr_i, sep="_"), dnm_chr)
}
#First, the DNMs are sorted by chromosome. This loop makes the word chr# and filters the dnms file based on this. Then, a new variable with the name dnm_chr_# is made, and the variants are assigned to it.
clustered_dnms <- data.frame(Chromosome, Start.position, End.position, Reference, Variant, parentOfOrigin, distance, distance2)
#First, the DNMs are sorted by chromosome. This loop makes the word chr# and filters the dnms file based on this. Then, a new variable with the name dnm_chr_# is made, and the variants are assigned to it.
clustered_dnms <- data.frame(Chromosome=NA, Start.position=NA, End.position=NA, Reference=NA, Variant=NA, parentOfOrigin=NA, distance=NA, distance2=NA)
for (dnm_chr_i in c(1:22)){
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
dnm_chr <- dnm_chr %>% filter(distance < 10000 | distance2 < 10000) #Filter on both distances >10kb
clustered_dnms = clustered_dnms%>% full_join(dnm_chr, by="Chromosome")
#merge(dnm_chr, clustered_dnms, by="Chromosome", all=TRUE)
assign(paste("dnm_clustered_chr", dnm_chr_i, sep="_"), dnm_chr)
}
clustered_dnms
clustered_dnms <- full_join(clustered_dnms, dnm_chr, by=NULL, copy=FALSE)
clustered_dnms
#First, the DNMs are sorted by chromosome. This loop makes the word chr# and filters the dnms file based on this. Then, a new variable with the name dnm_chr_# is made, and the variants are assigned to it.
clustered_dnms <- data.frame(Chromosome=NA, Start.position=NA, End.position=NA, Reference=NA, Variant=NA, parentOfOrigin=NA, distance=NA, distance2=NA)
for (dnm_chr_i in c(1:22)){
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
dnm_chr <- dnm_chr %>% filter(distance < 10000 | distance2 < 10000) #Filter on both distances >10kb
clustered_dnms <- full_join(clustered_dnms, dnm_chr, by=NULL, copy=FALSE)
#clustered_dnms = clustered_dnms%>% full_join(dnm_chr, by="Chromosome")
#merge(dnm_chr, clustered_dnms, by="Chromosome", all=TRUE)
assign(paste("dnm_clustered_chr", dnm_chr_i, sep="_"), dnm_chr)
}
clustered_dnms
dnm_clustered_chr_3
setwd('/Users/emilvorsteveld/work/R/DNM') #set working directory
data <- read.csv2("data.csv") #load data from csv file
data[is.na(data)] = "DNM"
pat <- 816
nrow_total <- nrow(data)
print(nrow_total)
avg_variants <- nrow_total / pat
#data %>% select(Chromosome, Start.position, End.position, Reference, Variant, parentOfOrigin)
source("npatmat.r")
source("mut_type.r")
source("var_per_chr.r")
source("DNM_type.r")
source("DNM_distance.r")
plot_grid(df_fig, df_var_fig, nchr_fig, ndnm_fig, df_var_dnm_fig, df_var_dnm_fig_clustered) #Adding the figures into one image
df_var_dnm_fig_clustered <- ggplot(data=df_var_dnm_clustered, aes(dnm_var_clustered, dnm_numbers_var_clustered, fill=dnm_numbers_var_clustered))+ #Fourth figure
geom_bar(stat="identity", position=position_dodge())+
theme_classic()
#Making a data frame, adding all the data together
dnm_var_clustered <- c("TG", "CA", "TA", "TC", "CT", "CG")
dnm_numbers_var_clustered <- c(nTG_clustered_dnm, nCA_clustered_dnm, nTA_clustered_dnm, nTC_clustered_dnm, nCT_clustered_dnm, nCG_clustered_dnm)
TG_clustered_dnm <- clustered_dnms %>% filter(Reference =="T", Variant=="G")
nTG_clustered_dnm <- nrow(TG_clustered_dnm)
TG_clustered_dnm
nTG_clustered_dnm
TG_clustered_dnm <- clustered_dnms %>% filter(Reference =="T", Variant=="G")
nTG_clustered_dnm <- nrow(TG_clustered_dnm)
TC_clustered_dnm <- clustered_dnms %>% filter(Reference =="T", Variant=="C")
nTC_clustered_dnm <- nrow(TC_clustered_dnm)
TA_clustered_dnm <- clustered_dnms %>% filter(Reference =="T", Variant=="A")
nTA_clustered_dnm <- nrow(TA_clustered_dnm)
CT_clustered_dnm <- clustered_dnms %>% filter(Reference =="C", Variant=="T")
nCT_clustered_dnm <- nrow(CT_clustered_dnm)
CG_clustered_dnm <- clustered_dnms %>% filter(Reference =="C", Variant=="G")
nCG_clustered_dnm <- nrow(CG_clustered_dnm)
CA_clustered_dnm <- clustered_dnms %>% filter(Reference =="C", Variant=="A")
nCA_clustered_dnm <- nrow(CA_clustered_dnm)
#Making a data frame, adding all the data together
dnm_var_clustered <- c("TG", "CA", "TA", "TC", "CT", "CG")
dnm_numbers_var_clustered <- c(nTG_clustered_dnm, nCA_clustered_dnm, nTA_clustered_dnm, nTC_clustered_dnm, nCT_clustered_dnm, nCG_clustered_dnm)
df_var_dnm_clustered <- data.frame(dnm_var_clustered, dnm_numbers_var_clustered)
df_var_dnm_fig_clustered <- ggplot(data=df_var_dnm_clustered, aes(dnm_var_clustered, dnm_numbers_var_clustered, fill=dnm_numbers_var_clustered))+ #Fourth figure
geom_bar(stat="identity", position=position_dodge())+
theme_classic()
plot_grid(df_fig, df_var_fig, nchr_fig, ndnm_fig, df_var_dnm_fig, df_var_dnm_fig_clustered) #Adding the figures into one image
df_var_dnm_clustered
non_clustered_dnms <- data.frame(Chromosome=NA, Start.position=NA, End.position=NA, Reference=NA, Variant=NA, parentOfOrigin=NA, distance=NA, distance2=NA)
for (dnm_chr_i in c(1:22)){
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
dnm_chr <- dnm_chr %>% filter(distance < 10000 | distance2 < 10000) #Filter on both distances >10kb
non_clustered_dnms <- full_join(clustered_dnms, dnm_chr, by=NULL, copy=FALSE)
#clustered_dnms = clustered_dnms%>% full_join(dnm_chr, by="Chromosome")
#merge(dnm_chr, clustered_dnms, by="Chromosome", all=TRUE)
assign(paste("dnm_non_clustered_chr", dnm_chr_i, sep="_"), dnm_chr) #change the name of the final output, makes a file with all the clustered variants per chr.
}
non_clustered_dnms
non_clustered_dnms <- data.frame(Chromosome=NA, Start.position=NA, End.position=NA, Reference=NA, Variant=NA, parentOfOrigin=NA, distance=NA, distance2=NA)
for (dnm_chr_i in c(1:22)){
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
dnm_chr <- dnm_chr %>% filter(distance > 10000 | distance2 > 10000) #Filter on both distances >10kb
non_clustered_dnms <- full_join(clustered_dnms, dnm_chr, by=NULL, copy=FALSE)
#clustered_dnms = clustered_dnms%>% full_join(dnm_chr, by="Chromosome")
#merge(dnm_chr, clustered_dnms, by="Chromosome", all=TRUE)
assign(paste("dnm_non_clustered_chr", dnm_chr_i, sep="_"), dnm_chr) #change the name of the final output, makes a file with all the clustered variants per chr.
}
non_clustered_dnms
clustered_dnms
non_clustered_dnms <- data.frame(Chromosome=NA, Start.position=NA, End.position=NA, Reference=NA, Variant=NA, parentOfOrigin=NA, distance=NA, distance2=NA)
for (dnm_chr_i in c(1:22)){
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
dnm_chr <- dnm_chr %>% filter(distance > 10000 & distance2 > 10000) #Filter on both distances >10kb
non_clustered_dnms <- full_join(clustered_dnms, dnm_chr, by=NULL, copy=FALSE)
#clustered_dnms = clustered_dnms%>% full_join(dnm_chr, by="Chromosome")
#merge(dnm_chr, clustered_dnms, by="Chromosome", all=TRUE)
assign(paste("dnm_non_clustered_chr", dnm_chr_i, sep="_"), dnm_chr) #change the name of the final output, makes a file with all the clustered variants per chr.
}
non_clustered_dnms
non_clustered_dnms <- data.frame(Chromosome=NA, Start.position=NA, End.position=NA, Reference=NA, Variant=NA, parentOfOrigin=NA, distance=NA, distance2=NA)
for (dnm_chr_i in c(1:22)){
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
dnm_chr <- dnm_chr %>% filter(distance > 10000, distance2 > 10000) #Filter on both distances >10kb
non_clustered_dnms <- full_join(clustered_dnms, dnm_chr, by=NULL, copy=FALSE)
#clustered_dnms = clustered_dnms%>% full_join(dnm_chr, by="Chromosome")
#merge(dnm_chr, clustered_dnms, by="Chromosome", all=TRUE)
assign(paste("dnm_non_clustered_chr", dnm_chr_i, sep="_"), dnm_chr) #change the name of the final output, makes a file with all the clustered variants per chr.
}
non_clustered_dnms
#data %>% select(Chromosome, Start.position, End.position, Reference, Variant, parentOfOrigin)
source("npatmat.r")
source("mut_type.r")
source("var_per_chr.r")
source("DNM_type.r")
source("DNM_distance.r")
non_clustered_dnms
dnm_non_clustered_chr_1
non_clustered_dnms <- data.frame(Chromosome=NA, Start.position=NA, End.position=NA, Reference=NA, Variant=NA, parentOfOrigin=NA, distance=NA, distance2=NA)
for (dnm_chr_i in c(1:22)){
dnm_chr_n <- paste("chr", dnm_chr_i, sep = "") #Make chromosome#
dnm_chr_a <- dnms %>% filter(Chromosome == dnm_chr_n) #Filter per chromosome
dnm_chr <- data.frame(dnm_chr_a) #Make a data frame of the filtered dnms per chromosome
dnm_chr <- dnm_chr[order(dnm_chr$Start.position),] #Sort based on the start position
dnm_chr <- dnm_chr %>% mutate(distance = Start.position - lag(Start.position, default = Start.position[1])) #Add a column that calculates the difference in start position
dnm_chr$distance2 = dnm_chr$distance
shift <- function(x, n){
c(tail(x, -n), rep(NA, n))
}
dnm_chr$distance2 <- shift(dnm_chr$distance2, 1) #Shift the second distance column up one row
dnm_chr <- dnm_chr %>% filter(distance > 10000, distance2 > 10000) #Filter on both distances >10kb
non_clustered_dnms <- full_join(non_clustered_dnms, dnm_chr, by=NULL, copy=FALSE)
#clustered_dnms = clustered_dnms%>% full_join(dnm_chr, by="Chromosome")
#merge(dnm_chr, clustered_dnms, by="Chromosome", all=TRUE)
assign(paste("dnm_non_clustered_chr", dnm_chr_i, sep="_"), dnm_chr) #change the name of the final output, makes a file with all the clustered variants per chr.
}
non_clustered_dnms
#Now filtering on nuc. change again
TG_clustered_dnm <- clustered_dnms %>% filter(Reference =="T", Variant=="G")
nTG_clustered_dnm <- nrow(TG_clustered_dnm)
TG_non_clustered_dnm <- non_clustered_dnms %>% filter(Reference =="T", Variant=="G")
nTG_non_clustered_dnm <- nrow(TG_non_clustered_dnm)
TC_clustered_dnm <- non_clustered_dnms %>% filter(Reference =="T", Variant=="C")
nTC_clustered_dnm <- nrow(TC_non_clustered_dnm)
TC_non_clustered_dnm <- clustered_dnms %>% filter(Reference =="T", Variant=="C")
nTC_non_clustered_dnm <- nrow(TC_non_clustered_dnm)
TA_clustered_dnm <- clustered_dnms %>% filter(Reference =="T", Variant=="A")
nTA_clustered_dnm <- nrow(TA_clustered_dnm)
TC_clustered_dnm <- non_clustered_dnms %>% filter(Reference =="T", Variant=="C")
nTC_clustered_dnm <- nrow(TC_non_clustered_dnm)
TC_non_clustered_dnm <- clustered_dnms %>% filter(Reference =="T", Variant=="C")
nTC_non_clustered_dnm <- nrow(TC_non_clustered_dnm)
TA_clustered_dnm <- clustered_dnms %>% filter(Reference =="T", Variant=="A")
nTA_clustered_dnm <- nrow(TA_clustered_dnm)
TA_non_clustered_dnm <- non_clustered_dnms %>% filter(Reference =="T", Variant=="A")
nTA_non_clustered_dnm <- nrow(TA_non_clustered_dnm)
CT_clustered_dnm <- clustered_dnms %>% filter(Reference =="C", Variant=="T")
nCT_clustered_dnm <- nrow(CT_clustered_dnm)
CT_non_clustered_dnm <- non_clustered_dnms %>% filter(Reference =="C", Variant=="T")
nCT_non_clustered_dnm <- nrow(CT_non_clustered_dnm)
CG_clustered_dnm <- clustered_dnms %>% filter(Reference =="C", Variant=="G")
nCG_clustered_dnm <- nrow(CG_clustered_dnm)
CG_non_clustered_dnm <- non_clustered_dnms %>% filter(Reference =="C", Variant=="G")
nCG_non_clustered_dnm <- nrow(CG_non_clustered_dnm)
CA_clustered_dnm <- clustered_dnms %>% filter(Reference =="C", Variant=="A")
nCA_clustered_dnm <- nrow(CA_clustered_dnm)
CA_non_clustered_dnm <- non_clustered_dnms %>% filter(Reference =="C", Variant=="A")
nCA_non_clustered_dnm <- nrow(CA_non_clustered_dnm)
#Making a data frame, adding all the data together
dnm_var_clustered <- c("TG", "CA", "TA", "TC", "CT", "CG") #First column: what nuc. change
dnm_numbers_var_clustered <- c(nTG_clustered_dnm, nCA_clustered_dnm, nTA_clustered_dnm, nTC_clustered_dnm, nCT_clustered_dnm, nCG_clustered_dnm, nTG_non_clustered_dnm, nCA_non_clustered_dnm, nTA_non_clustered_dnm, nTC_non_clustered_dnm, nCT_non_clustered_dnm, nCG_non_clustered_dnm) #Second column: how many of this change
df_var_dnm_clustered <- data.frame(dnm_var_clustered, dnm_numbers_var_clustered) #Add them together in a file
df_var_dnm_clustered
#Making a data frame, adding all the data together
clustered <- c("Y", "Y", "Y", "Y", "Y", "Y", "N", "N", "N", "N", "N", "N")
dnm_var_clustered <- c("TG", "CA", "TA", "TC", "CT", "CG") #First column: what nuc. change
dnm_numbers_var_clustered <- c(nTG_clustered_dnm, nCA_clustered_dnm, nTA_clustered_dnm, nTC_clustered_dnm, nCT_clustered_dnm, nCG_clustered_dnm, nTG_non_clustered_dnm, nCA_non_clustered_dnm, nTA_non_clustered_dnm, nTC_non_clustered_dnm, nCT_non_clustered_dnm, nCG_non_clustered_dnm) #Second column: how many of this change
df_var_dnm_clustered <- data.frame(dnm_var_clustered, dnm_numbers_var_clustered, clustered) #Add them together in a file
df_var_dnm_clustered
df_var_dnm_fig_clustered <- ggplot(data=df_var_dnm_clustered, aes(dnm_var_clustered, dnm_numbers_var_clustered, fill=dnm_numbers_var_clustered))+
geom_bar(stat="identity", position=position_dodge())+
theme_classic()
df_var_dnm_fig_clustered <- ggplot(data=df_var_dnm_clustered, aes(dnm_var_clustered, dnm_numbers_var_clustered, fill=clustered))+
geom_bar(stat="identity", position=position_dodge())+
theme_classic()
plot_grid(df_fig, df_var_fig, nchr_fig, ndnm_fig, df_var_dnm_fig, df_var_dnm_fig_clustered) #Adding the figures into one image
#Making a data frame, adding all the data together
clustered <- c("Clustered", "Clustered", "Clustered", "Clustered", "Clustered", "Clustered", "Non-clustered", "Non-clustered", "Non-clustered", "Non-clustered", "Non-clustered", "Non-clustered")
dnm_var_clustered <- c("TG", "CA", "TA", "TC", "CT", "CG") #First column: what nuc. change
dnm_numbers_var_clustered <- c(nTG_clustered_dnm, nCA_clustered_dnm, nTA_clustered_dnm, nTC_clustered_dnm, nCT_clustered_dnm, nCG_clustered_dnm, nTG_non_clustered_dnm, nCA_non_clustered_dnm, nTA_non_clustered_dnm, nTC_non_clustered_dnm, nCT_non_clustered_dnm, nCG_non_clustered_dnm) #Second column: how many of this change
df_var_dnm_clustered <- data.frame(dnm_var_clustered, dnm_numbers_var_clustered, clustered) #Add them together in a file
df_var_dnm_fig_clustered <- ggplot(data=df_var_dnm_clustered, aes(dnm_var_clustered, dnm_numbers_var_clustered, fill=clustered))+
geom_bar(stat="identity", position=position_dodge())+
theme_classic()
plot_grid(df_fig, df_var_fig, nchr_fig, ndnm_fig, df_var_dnm_fig, df_var_dnm_fig_clustered) #Adding the figures into one image
n_non_clustered <-nrow(non_clustered_dnms)
n_non_clustered
n_clustered <-nrow(clustered_dnms)
n_clustered
nTG_clustered_dnm <- (nrow(TG_clustered_dnm)/n_clustered)*100
nTG_clustered_dnm
source('~/work/R/DNM/DNM_distance.R', echo=TRUE)
nCG_non_clustered_dnm <- (nrow(CG_non_clustered_dnm)/n_non_clustered*)100
nCG_clustered_dnm <- (nrow(CG_clustered_dnm)/n_clustered)*100
CG_non_clustered_dnm <- non_clustered_dnms %>% filter(Reference =="C", Variant=="G")
nCG_non_clustered_dnm <- (nrow(CG_non_clustered_dnm)/n_non_clustered*)100
nCG_non_clustered_dnm <- (nrow(CG_non_clustered_dnm)/n_non_clustered*)100
nCG_non_clustered_dnm <- (nrow(CG_non_clustered_dnm)/n_non_clustered)*100
source('~/work/R/DNM/DNM_distance.R', echo=TRUE)
plot_grid(df_fig, df_var_fig, nchr_fig, ndnm_fig, df_var_dnm_fig, df_var_dnm_fig_clustered) #Adding the figures into one image
source('~/work/R/DNM/DNM_distance.R', echo=TRUE)
plot_grid(df_fig, df_var_fig, nchr_fig, ndnm_fig, df_var_dnm_fig, df_var_dnm_fig_clustered) #Adding the figures into one image
nCT_non_clustered_dnm
ndnms
nrow(CT_non_clustered_dnm)
nrow(CT_non_clustered_dnm)/28577
plot_grid(df_fig, df_var_fig, nchr_fig, ndnm_fig, df_var_dnm_fig, df_var_dnm_fig_clustered) #Adding the figures into one image
abc <- nTG_clustered_dnm+nCA_clustered_dnm+nTA_clustered_dnm+nTC_clustered_dnm+nCT_clustered_dnm+nCG_clustered_dnm+nTG_non_clustered_dnm+nCA_non_clustered_dnm+nTA_non_clustered_dnm+nTC_non_clustered_dnm+nCT_non_clustered_dnm+nCG_non_clustered_dnm
abc
nrow(non_clustered_dnms)
nrow(non_clustered_dnms)
nrow(clustered_dnms)
qdnms <- nrow(non_clustered_dnms) + nrow(clustered_dnms)
qdnms
ndnms
nrow(non_clustered_dnms)
nrow(clustered_dnms)
df_clustered <- data.frame(clustered_dnms)
df_clustered
df_clustered <- data.frame(subset(clustered_dnms, select = c("Chromosome", "Start.position"))
df_clustered
df_clustered <- data.frame(subset(clustered_dnms, select = c("Chromosome", "Start.position"))
df_clustered <- subset(clustered_dnms, select = c("Chromosome", "Start.position")
abc <- nTG_clustered_dnm+nCA_clustered_dnm+nTA_clustered_dnm+nTC_clustered_dnm+nCT_clustered_dnm+nCG_clustered_dnm+nTG_non_clustered_dnm+nCA_non_clustered_dnm+nTA_non_clustered_dnm+nTC_non_clustered_dnm+nCT_non_clustered_dnm+nCG_non_clustered_dnm #42, somewhere, some DNMs are disappearing!
df_clustered <- subset(clustered_dnms, select = c("Chromosome", "Start.position")
df_clustered <- subset(clustered_dnms, select = c("Chromosome", "Start.position"))
df_clustered
abc <- nTG_clustered_dnm+nCA_clustered_dnm+nTA_clustered_dnm+nTC_clustered_dnm+nCT_clustered_dnm+nCG_clustered_dnm+nTG_non_clustered_dnm+nCA_non_clustered_dnm+nTA_non_clustered_dnm+nTC_non_clustered_dnm+nCT_non_clustered_dnm+nCG_non_clustered_dnm #42, somewhere, some DNMs are disappearing!
abc
qdnms
ndnms
qdnms/ndnms
*100
0.9995101*100
ab <- TG_clustered_dnm+CA_clustered_dnm+TA_clustered_dnm+TC_clustered_dnm+CT_clustered_dnm+CG_clustered_dnm+TG_non_clustered_dnm+CA_non_clustered_dnm+TA_non_clustered_dnm+TC_non_clustered_dnm+CT_non_clustered_dnm+CG_non_clustered_dnm #42% in total, somewhere, some DNMs are disappearing!
ab <- TG_clustered_dnm+CA_clustered_dnm+TA_clustered_dnm+TC_clustered_dnm+CT_clustered_dnm+CG_clustered_dnm+TG_non_clustered_dnm+CA_non_clustered_dnm+TA_non_clustered_dnm+TC_non_clustered_dnm+CT_non_clustered_dnm+CG_non_clustered_dnm #42% in total, somewhere, some DNMs are disappearing!
TG_clustered_dnm+CA_clustered_dnm
TG_clustered_dnm + CA_clustered_dnm
